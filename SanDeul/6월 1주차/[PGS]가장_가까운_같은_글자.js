// s  |	 result
// "banana"	[-1, -1, -1, 2, 2, 2]
// "foobar"	[-1, -1, 1, -1, -1, -1]

function solution(s) {
  let index = [];
  const result = s.split("");

  return result.map((e, i) => {
    for (let j = 0; j < result.length; j++) {
      if (i <= j) continue;
      if (e === result[j]) index.push((j - i) * -1);
    }

    e = index.length > 0 ? index[index.length - 1] : -1;
    index = [];
    return e;
  });
}

// 시간 개오바...
// 테스트 1 〉	통과 (0.15ms, 33.4MB)
// 테스트 2 〉	통과 (0.44ms, 33.6MB)
// 테스트 3 〉	통과 (0.44ms, 33.5MB)
// 테스트 4 〉	통과 (6.97ms, 37MB)
// 테스트 5 〉	통과 (571.76ms, 38.5MB)
// 테스트 6 〉	통과 (81.23ms, 38.4MB)
// 테스트 7 〉	통과 (493.27ms, 38.2MB)
// 테스트 8 〉	통과 (52.24ms, 38.4MB)
// 테스트 9 〉	통과 (475.85ms, 38.4MB)
// 테스트 10 〉	통과 (21.20ms, 37.5MB)
// 테스트 11 〉	통과 (398.15ms, 38.2MB)
// 테스트 12 〉	통과 (0.15ms, 33.5MB)
// 테스트 13 〉	통과 (0.15ms, 33.5MB)
// 테스트 14 〉	통과 (4.70ms, 36.6MB)
// 테스트 15 〉	통과 (0.16ms, 33.4MB)
// 테스트 16 〉	통과 (0.19ms, 33.5MB)
// 테스트 17 〉	통과 (0.23ms, 33.5MB)
// 테스트 18 〉	통과 (19.24ms, 37.5MB)
// 테스트 19 〉	통과 (25.28ms, 37.2MB)
// 테스트 20 〉	통과 (3.70ms, 36.6MB)
// 테스트 21 〉	통과 (0.47ms, 33.6MB)
// 테스트 22 〉	통과 (114.71ms, 38.4MB)
// 테스트 23 〉	통과 (6.77ms, 36.5MB)
// 테스트 24 〉	통과 (3.75ms, 36.7MB)
// 테스트 25 〉	통과 (6.69ms, 36.7MB)
// 테스트 26 〉	통과 (1.25ms, 36.4MB)
// 테스트 27 〉	통과 (4.62ms, 36.8MB)
// 테스트 28 〉	통과 (4.24ms, 36.7MB)
// 테스트 29 〉	통과 (0.07ms, 33.5MB)
// 테스트 30 〉	통과 (483.48ms, 38.4MB)

// 다른 사람의 풀이
function goodSolution1(s) {
  const hash = {}; // 객체를 활용한 풀이 - 프로퍼티에 재선언하는 방식 활용

  // split('') 대신 문자열 스프레드 연산자 사용(같은 결과가 출력됨)
  return [...s].map((v, i) => {
    let result = hash[v] !== undefined ? i - hash[v] : -1;
    hash[v] = i;
    return result;
  });
}

// 테스트 1 〉	통과 (0.10ms, 33.6MB)
// 테스트 2 〉	통과 (0.13ms, 33.6MB)
// 테스트 3 〉	통과 (0.17ms, 33.6MB)
// 테스트 4 〉	통과 (0.22ms, 33.6MB)
// 테스트 5 〉	통과 (1.44ms, 36.6MB)
// 테스트 6 〉	통과 (0.57ms, 37.1MB)
// 테스트 7 〉	통과 (1.32ms, 36.5MB)
// 테스트 8 〉	통과 (0.42ms, 37MB)
// 테스트 9 〉	통과 (1.26ms, 36.5MB)
// 테스트 10 〉	통과 (0.28ms, 33.8MB)
// 테스트 11 〉	통과 (1.26ms, 36.5MB)
// 테스트 12 〉	통과 (0.06ms, 33.6MB)
// 테스트 13 〉	통과 (0.07ms, 33.5MB)
// 테스트 14 〉	통과 (0.15ms, 33.7MB)
// 테스트 15 〉	통과 (0.06ms, 33.5MB)
// 테스트 16 〉	통과 (0.09ms, 33.7MB)
// 테스트 17 〉	통과 (0.10ms, 33.5MB)
// 테스트 18 〉	통과 (0.28ms, 33.8MB)
// 테스트 19 〉	통과 (0.31ms, 33.7MB)
// 테스트 20 〉	통과 (0.16ms, 33.5MB)
// 테스트 21 〉	통과 (0.14ms, 33.6MB)
// 테스트 22 〉	통과 (1.10ms, 37.3MB)
// 테스트 23 〉	통과 (0.22ms, 33.7MB)
// 테스트 24 〉	통과 (0.16ms, 33.7MB)
// 테스트 25 〉	통과 (0.34ms, 33.6MB)
// 테스트 26 〉	통과 (0.11ms, 33.7MB)
// 테스트 27 〉	통과 (0.17ms, 33.7MB)
// 테스트 28 〉	통과 (0.17ms, 33.6MB)
// 테스트 29 〉	통과 (0.06ms, 33.6MB)
// 테스트 30 〉	통과 (1.38ms, 36.5MB)

const goodSolution2 = (s) =>
  [...s].map((char, i) => {
    const count = s.slice(0, i).lastIndexOf(char); // 천재인가...
    return count < 0 ? count : i - count;
  });

// 테스트 1 〉	통과 (0.05ms, 33.5MB)
// 테스트 2 〉	통과 (0.07ms, 33.5MB)
// 테스트 3 〉	통과 (0.07ms, 33.4MB)
// 테스트 4 〉	통과 (0.22ms, 33.7MB)
// 테스트 5 〉	통과 (24.46ms, 37.7MB)
// 테스트 6 〉	통과 (0.80ms, 37MB)
// 테스트 7 〉	통과 (18.70ms, 37.7MB)
// 테스트 8 〉	통과 (0.61ms, 36.9MB)
// 테스트 9 〉	통과 (18.58ms, 37.7MB)
// 테스트 10 〉	통과 (0.39ms, 33.6MB)
// 테스트 11 〉	통과 (2.02ms, 36.8MB)
// 테스트 12 〉	통과 (0.05ms, 33.4MB)
// 테스트 13 〉	통과 (0.07ms, 33.4MB)
// 테스트 14 〉	통과 (0.15ms, 33.5MB)
// 테스트 15 〉	통과 (0.05ms, 33.5MB)
// 테스트 16 〉	통과 (0.06ms, 33.5MB)
// 테스트 17 〉	통과 (0.06ms, 33.4MB)
// 테스트 18 〉	통과 (0.38ms, 33.7MB)
// 테스트 19 〉	통과 (0.42ms, 33.7MB)
// 테스트 20 〉	통과 (0.12ms, 33.5MB)
// 테스트 21 〉	통과 (0.06ms, 33.5MB)
// 테스트 22 〉	통과 (0.95ms, 37.3MB)
// 테스트 23 〉	통과 (0.12ms, 33.5MB)
// 테스트 24 〉	통과 (0.15ms, 33.5MB)
// 테스트 25 〉	통과 (0.18ms, 33.5MB)
// 테스트 26 〉	통과 (0.08ms, 33.5MB)
// 테스트 27 〉	통과 (0.18ms, 33.5MB)
// 테스트 28 〉	통과 (0.17ms, 33.5MB)
// 테스트 29 〉	통과 (0.04ms, 33.5MB)
// 테스트 30 〉	통과 (2.40ms, 36.7MB)
