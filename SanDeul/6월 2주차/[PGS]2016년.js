function solution(a, b) {
  const day = ["THU", "FRI", "SAT", "SUN", "MON", "TUE", "WED"];
  const month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

  return day[(month.slice(0, a - 1).reduce((a, c) => a + c, 0) + b) % 7];
}
// slice 메서드 사용에 주의 - 숫자 하나만 입력하면 그 지점이 begin 지점이다.
// arr.slice([begin[, end]])

// 속도 아주 굿
// 테스트 1 〉	통과 (0.04ms, 33.5MB)
// 테스트 2 〉	통과 (0.04ms, 33.5MB)
// 테스트 3 〉	통과 (0.05ms, 33.7MB)
// 테스트 4 〉	통과 (0.05ms, 33.5MB)
// 테스트 5 〉	통과 (0.05ms, 33.4MB)
// 테스트 6 〉	통과 (0.05ms, 33.6MB)
// 테스트 7 〉	통과 (0.05ms, 33.6MB)
// 테스트 8 〉	통과 (0.05ms, 33.5MB)
// 테스트 9 〉	통과 (0.05ms, 33.5MB)
// 테스트 10 〉	통과 (0.05ms, 33.6MB)
// 테스트 11 〉	통과 (0.08ms, 33.5MB)
// 테스트 12 〉	통과 (0.05ms, 33.5MB)
// 테스트 13 〉	통과 (0.05ms, 33.5MB)
// 테스트 14 〉	통과 (0.05ms, 33.5MB)

// newDate 메서드 사용하여 해결하는 방식
function solution2(a, b) {
  let tempDate = new Date(2016, a - 1, b);
  return tempDate.toString().slice(0, 3).toUpperCase();
}

// 느리다...
// 테스트 1 〉	통과 (184.60ms, 34.4MB)
// 테스트 2 〉	통과 (310.77ms, 34.5MB)
// 테스트 3 〉	통과 (229.24ms, 34.3MB)
// 테스트 4 〉	통과 (290.90ms, 34.4MB)
// 테스트 5 〉	통과 (0.25ms, 34.4MB)
// 테스트 6 〉	통과 (0.38ms, 34.3MB)
// 테스트 7 〉	통과 (0.29ms, 34.4MB)
// 테스트 8 〉	통과 (0.37ms, 34.4MB)
// 테스트 9 〉	통과 (170.76ms, 34.4MB)
// 테스트 10 〉	통과 (0.25ms, 34.5MB)
// 테스트 11 〉	통과 (0.26ms, 34.4MB)
// 테스트 12 〉	통과 (0.26ms, 34.4MB)
// 테스트 13 〉	통과 (0.35ms, 34.3MB)
// 테스트 14 〉	통과 (0.27ms, 34.4MB)
