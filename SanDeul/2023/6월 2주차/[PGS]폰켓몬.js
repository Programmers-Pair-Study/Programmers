function solution(nums) {
  const uniqueNums = nums.filter((e, i) => nums.indexOf(e) === i);
  return nums.length / 2 >= uniqueNums.length
    ? uniqueNums.length
    : nums.length / 2;
}

// 지문을 읽기 싫었던 하지만 쉬웠던 문제...
// 테스트 1 〉	통과 (0.05ms, 33.5MB)
// 테스트 2 〉	통과 (0.05ms, 33.4MB)
// 테스트 3 〉	통과 (0.07ms, 33.5MB)
// 테스트 4 〉	통과 (0.04ms, 33.5MB)
// 테스트 5 〉	통과 (0.05ms, 33.4MB)
// 테스트 6 〉	통과 (0.05ms, 33.5MB)
// 테스트 7 〉	통과 (0.06ms, 33.4MB)
// 테스트 8 〉	통과 (0.07ms, 33.5MB)
// 테스트 9 〉	통과 (0.06ms, 33.4MB)
// 테스트 10 〉	통과 (0.09ms, 33.5MB)
// 테스트 11 〉	통과 (0.09ms, 33.5MB)
// 테스트 12 〉	통과 (0.82ms, 33.5MB)
// 테스트 13 〉	통과 (0.53ms, 33.5MB)
// 테스트 14 〉	통과 (0.57ms, 33.4MB)
// 테스트 15 〉	통과 (0.23ms, 33.5MB)
// 테스트 16 〉	통과 (55.35ms, 34.1MB)
// 테스트 17 〉	통과 (34.71ms, 34.1MB)
// 테스트 18 〉	통과 (41.02ms, 34MB)
// 테스트 19 〉	통과 (11.42ms, 33.8MB)
// 테스트 20 〉	통과 (1.47ms, 33.9MB)

function solution2(nums) {
  const max = nums.length / 2;
  const arr = [...new Set(nums)]; // 배열 안에 바로 ...new Set(arr) 생성 가능

  return arr.length > max ? max : arr.length;
}
// Set이 조금 더 속도가 빠른 것 같다..!
// 테스트 1 〉	통과 (0.03ms, 33.5MB)
// 테스트 2 〉	통과 (0.03ms, 33.5MB)
// 테스트 3 〉	통과 (0.03ms, 33.5MB)
// 테스트 4 〉	통과 (0.03ms, 33.5MB)
// 테스트 5 〉	통과 (0.04ms, 33.6MB)
// 테스트 6 〉	통과 (0.04ms, 33.4MB)
// 테스트 7 〉	통과 (0.06ms, 33.4MB)
// 테스트 8 〉	통과 (0.05ms, 33.6MB)
// 테스트 9 〉	통과 (0.03ms, 33.5MB)
// 테스트 10 〉	통과 (0.03ms, 33.4MB)
// 테스트 11 〉	통과 (0.03ms, 33.6MB)
// 테스트 12 〉	통과 (0.10ms, 33.5MB)
// 테스트 13 〉	통과 (0.10ms, 33.6MB)
// 테스트 14 〉	통과 (0.07ms, 33.7MB)
// 테스트 15 〉	통과 (0.06ms, 33.5MB)
// 테스트 16 〉	통과 (0.58ms, 34.2MB)
// 테스트 17 〉	통과 (0.87ms, 34.3MB)
// 테스트 18 〉	통과 (0.46ms, 34.1MB)
// 테스트 19 〉	통과 (0.29ms, 33.9MB)
// 테스트 20 〉	통과 (0.25ms, 33.9MB)
